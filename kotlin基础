基本语法:
	主函数：fun main(){}
	打印输出：println()

数据类型：
	1.Kotlin中的数据类型实际上是包装类(编译后时基本数据类型)，因此没有隐式类型转换(也就是说Short不能隐式转换为Int，Float不能隐式转换为Double)
	2.如果想要声明某种类型的变量必须显示的写出该变量,否则若在声明变量时没有声明其类型：
		未超出Int最大值的整型都会被修饰为Int
		超过了的整型会被修饰为Long，整型数字后加L直接就会被修饰为Long
		未超过Double最大值的浮点型都会被修饰为Double，浮点数后加F直接会被修饰为Float
	3.获取一个变量的数据类型：
		变量名::class->获取kotlin中的数据类型
		变量名::class.java->获取java中的数据类型
	4.字面常量：使用下划线使数字常量更易读(1_000_000,0xFF_EC_DE_5E)
	5.数据类型？：该数据类型可以为null，避免了Java中的NullPointException，普通的数据类型不能为null(编译后时包装类)
	6.正是因为Kotlin中数据类型实际上都是包装类，因此数字装箱(将一个变量的值赋值给另一个变量)没有同一性(同一个地址)，只有相等性(值相等)
	7.显示类型转换：
		小类型->大类型：xx.toXXX()
		大类型->小类型：
	8.位运算(只用于Int和Long)
	9.x,a,b最好是同一类型，可以是整型，浮点型，字符型Char的常量或变量
		x in a..b:x是否在[a,b]
		x !in a..b:x是否不在[a,b]

变量（属性与字段）:
	val：定义常量
	var：定义变量
	var和val的区别主要就是一个定义的是变量，一个定义的是常量，两种类型都需要赋初值
		1、定义时定义类型+赋值：val a:Int = 1
		2、定义时直接赋值(系统自动转换)：val a = 1
		3、定义时不赋值，但必须定义其数据类型：val a:Int   a=3(常用)
	作为属性：
		直接赋值/构造器进行初始化
	作为普通变量
		使用前必须赋值
	
		

数组：
	1.Kotlin中数组使用Array类，相当于也是一个包装类，也存在IntArray，DoubleArray等原生类型数组
	2.数组的创建：
		通过arrayOf()创建数组病传递元素值：val x: IntArray = intArrayOf(1,2,3)/val strs = arrayOf("hehe","haha")
		通过工厂方法创建：val arr = IntArray{5}
		使用lambda表达式初始化数组中的值：var arr = IntArray(5){it * 1}
	3.数组元素的调用：
		[]

字符串：
	1.字符串遍历：
		str[i]
		for(c in str)->str可以是字符串变量也可以是字符串常量
	2.原始字符串：
		"""..."""：前后三个引号，内部没有转移并且可以包含换行以及任何其他字符
		相当于是将字符串中的内容包括格式原样输出
	3.常用方法：
		trimMargin()：去除前导空格,默认去除的是所有|的前导空格，可以传参设置
					若没传参，该字符串中也没|，则不会去除
	*4.字符串模板：
		在字符串中使用${}读取某个变量的值或其属性

导包：(import)
	如果出现名字冲突，可使用as在当前包中重命名

程序控制：
	1.if
		if-else代替三目运算符：val max = if(a > b) a else b
		if-else作为代码块(表达式)，最终的表达式作为该块的值(可以赋值给变量)，必须有else：
			val max = if(a > b){
				print(a)
				a
			}else{
				print(b)
				b
			}
	2.when(代替switch)
		格式：1/ 0,1 / in 1...10 / 任意表达式(parseInt(x)) -> {...}
			else -> {...}
		when相对于switch的增强点：
			when可以作为语句：和switch大径相同
			when可以作为表达式：该表达式的返回值就是对应分支最后的表达式的值(类似于if-else作为表达式)，必须要存在else分支。
			when后不提供参数，就取代了if-else，所有分支的条件都是简单的布尔表达式，当一个分支的条件为真时则执行该分支即可
	3.for(同foreach)
		对提供迭代器的对象(数组、集合等)，实际上代替了iterator，next，hasNext那一套东西
		格式：
			for(item in collection)：遍历集合
			for(item:Int in ints)：遍历数组
			for(item in 1..3)：遍历区间(使用区间表达式)
		区间表达式：
			i in 1..4：遍历[1,4]
			i in 4 downTo 1：反向遍历，[4,1]
			i in 1..4 step 2：设置步长为2
			i in 1 until 10：左闭右开,[1,10)
		通过索引遍历数组/list：
			for(i in array.indices)：获取值
			for((index,value) in array.withIndex())：获取值($value)+下标($index)
	4.while/doWhile(同Java)

程序返回与跳转(不常用标签)
	return,break,continue基本的用法和Java相同，只不过增强在：可以跳转/返回至标签处
	Kotlin中任何表达式都可以使用标签(label)标记：
		标签格式：xxx@
	使用标签限制break，continue，return跳转至标签后的位置


	
